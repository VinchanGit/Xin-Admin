#!/usr/bin/env php
<?php
namespace xin;


class Xin
{

    protected array $require = [];

    protected array $argv = [];


    /**
     * @var resource|bool proc_open 返回的 resource
     */
    protected $process = false;
    private int $procStatus;
    private string $outputFile;
    private array $descriptorsPec;

    public function __construct(array $argv)
    {
        // 记录运行日志
        $outputDir = '.'. DIRECTORY_SEPARATOR . 'log' ;

        $runDate = time();

        $this->outputFile = $outputDir . DIRECTORY_SEPARATOR . 'run' . $runDate . '.log';
        if (!is_dir($outputDir)) {
            mkdir($outputDir, 0755, true);
        }
        file_put_contents($this->outputFile, date('Y-m-d H:i:s',$runDate));

        /**
         * 命令执行结果输出到文件而不是管道 build admin
         * 因为输出到管道时有延迟，而文件虽然需要频繁读取和对比内容，但是输出实时的
         */
        $this->descriptorsPec = [0 => ['pipe', 'r'], 1 => ['file', $this->outputFile, 'w'], 2 => ['file', $this->outputFile, 'w']];
        
        
        echo PHP_EOL;
        $this->format('Welcome to Xin Admin', true);
        $this->format();

        $this->argv = $argv;
        $jsonString = file_get_contents('./project.json');
        $data = json_decode($jsonString,true);
        if ($data === null) {
            echo "\033[31m无法解析 JSON 文件  \033[0m";
            die;
        } else {
            $this->require = $data['require'];
        }
        $this->format('Xin Admin '.$data['version']);
        $this->format();
        $this->verifyNode();
        $this->verifyComposer();
        $this->format('',true);

        echo "环境检测完成".PHP_EOL;

        $this->install();

    }

    public function install(): void
    {

        $command = "cd ./xin-admin && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ && composer install";
        $this->runCommand($command);

        $command = "cd ./xin-web && npm install -g pnpm && pnpm config set registry https://registry.npmmirror.com && pnpm install";
        $this->runCommand($command);

    }


    public function runCommand(string $command): void
    {

        $this->process = proc_open($command, $this->descriptorsPec, $pipes);

        if (!is_resource($this->process)) {
            echo 'Failed to execute';
        }


        while ($this->getProcStatus()) {
            // 读取输出流的数据
            $contents = file_get_contents($this->outputFile);
            echo sprintf("%s",$contents);
            usleep(500000);
        }
        echo PHP_EOL;

        $returnValue = proc_close($this->process);
        if ($returnValue !== 0) {
            echo '命令执行失败，错误代码: ' . $returnValue;
            die;
        }

    }


    public function verifyComposer(): void
    {

        $pattern = '/(\d+\.\d+\.\d+)/';
        exec('composer -v',$output);
        if(!empty($output)){
            preg_match($pattern,implode([$output[5],$output[6],$output[7],$output[8]]) , $haveComposerV);
            $haveComposerV = $haveComposerV[1] ?? $haveComposerV[0];
            $this->format('Composer ' . $haveComposerV);
            $this->format();

            preg_match($pattern, $this->require['composer'], $needComposerV);
            $needComposerV = $needComposerV[1] ?? $needComposerV[0];

            if(version_compare($haveComposerV,$needComposerV) == -1){
                echo "\033[31m composer 版本过低,请安装 {$this->require['composer']} 或以上的Node js 之后重试！ \033[0m";
                die;
            }

        }else {
            echo "\033[31m composer 未安装,请安装 {$this->require['composer']} 或以上的Node js 之后重试！ \033[0m";
            die;
        }

    }

    public function verifyNode(): void
    {
        $output = array();
        exec('node -v', $output);
        $pattern = '/(\d+\.\d+\.\d+)/';

        if (!empty($output)) {
            preg_match($pattern, $output[0], $haveNodeV);
            $haveNodeV = $haveNodeV[1] ?? $haveNodeV[0];
            $this->format('Node.js ' . $haveNodeV);
            $this->format();

            preg_match($pattern, $this->require['nodejs'], $needNodeV);
            $needNodeV = $needNodeV[1] ?? $needNodeV[0];
            if(version_compare($haveNodeV,$needNodeV) == -1){
                echo "\033[31mNode.js 版本过低,请安装 {$this->require['nodejs']} 或以上的Node js 之后重试！ \033[0m";
                die;
            }
        } else {
            echo "\033[31mNode.js 未安装,请安装 {$this->require['nodejs']} 或以上的Node js 之后重试！ \033[0m";
            die;
        }
    }

    public function format(string $text = '', bool $group = false): void
    {
        if($text != ''){
            $text = ' '.$text.' ';
        }
        $totalWidth = 80; // 总宽度
        if($group){
            $textLength = mb_strwidth($text);
            $leftPadding = (int)(($totalWidth - $textLength) / 2);
            $rightPadding = $totalWidth - $textLength - $leftPadding;

            $centeredText = str_pad($text, $textLength + $leftPadding, '-', STR_PAD_LEFT);
            $centeredText = str_pad($centeredText, $textLength + $leftPadding + $rightPadding, '-');

            echo $centeredText . PHP_EOL;
        }else {
            $text = "\033[32m$text\033[0m";
            $textLength = mb_strwidth($text) ;
            $leftPadding = (int)(($totalWidth - $textLength) / 2) + 4;
            $rightPadding = $totalWidth - $textLength - $leftPadding + 7;

            $centeredText = str_pad($text, $textLength + $leftPadding, ' ', STR_PAD_LEFT);
            $centeredText = str_pad($centeredText, $textLength + $leftPadding + $rightPadding, ' ');
            $centeredText = str_pad($centeredText, $textLength + $leftPadding + $rightPadding + 1, '-',STR_PAD_LEFT);
            $centeredText = str_pad($centeredText, $textLength + $leftPadding + $rightPadding + 2, '-');
            echo $centeredText . PHP_EOL;
        }

    }

    /**
     * 获取执行状态
     */
    public function getProcStatus(): bool
    {
        $status = proc_get_status($this->process);
        if ($status['running']) {
            $this->procStatus = 1;
            return true;
        } elseif ($this->procStatus === 1) {
            $this->procStatus = 0;
            if ($status['exitcode'] === 0) {
                echo 'success';
            } else {
                echo 'error';
            }
            return true;
        } else {
            return false;
        }
    }

    public function updateProgressBar($title,$progress): void
    {
        $barWidth = 50;
        $completedWidth = round($progress * $barWidth);
        $remainingWidth = $barWidth - $completedWidth;

        $bar = str_repeat('=', $completedWidth) . str_repeat(' ', $remainingWidth);

        echo sprintf("$title [%s]", $bar);
    }

}

new Xin($argv);
